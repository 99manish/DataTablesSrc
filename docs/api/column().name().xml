<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="columns">
	<name>column().name()</name>
	<summary>Get / set the name for a column.</summary>
	<since>2.0.0</since>

	<type type="function">
		<signature>column().name()</signature>
		<description>Get the column name</description>
		<returns type="string">The column name. If the column doesn't have a name defined, it will be an empty string.</returns>
	</type>

	<type type="function">
		<signature>column().name( value )</signature>
		<description>Set the column name</description>
		<returns type="DataTable.Api">DataTable API instance with the same column still selected.</returns>
	</type>

	<description>
		This method provides the ability to get and set a column name. Please note that the column name is hidden from the end user at all times - it is **not** the column title (`-init columns.title`).
		
		Column names are primarily used to make the selection of columns more intuitive than using a number, but they can also be used for logical conditions (was it column `x` that was clicked upon, for example). They will typically be set at initialisation time using `-init columns.name`, but this method provides the ability for the names to be changed dynamically.
	</description>

	<example title="Set the name for a column and then use it as a selector"><![CDATA[
var table = $('#example').DataTable();

table.column( 0 ).name( 'first' );

var columnData = table.column( 'first:name' ).data();

]]></example>

	<related>-init columns.name</related>
	<related>-api columns().names()</related>
</dt-api>