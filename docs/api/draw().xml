<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="core">
	<name>draw()</name>
	<summary>Redraw the table.</summary>
	<since>1.10</since>

	<type type="function">
		<signature>draw( [reset] )</signature>
		<parameter type="boolean" name="reset" default="true">
			Reset (default) or hold the current paging position. A full re-sort and re-filter is performed when this method is called, which is why the pagination reset is the default action.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance</returns>
	</type>

	<description>
		When you perform an action such as adding or deleting a row, changing the sorting, filtering or paging characteristics of the table you'll want DataTables to update the display to reflect these changes. This function is provided for that purpose.

		A draw is not performed automatically by most DataTables API actions to allow grouping of actions (for example adding multiple rows is more efficient if you group them. Keep in mind that due to the chaining nature of the DataTables API calling the `dt-api draw()` method is just a case of adding `.draw()` to your other API method calls, as shown in the examples below.

		Note that calling `dt-api draw()` will result in a full re-sort and re-filter of the table being performed.
	</description>

	<example title="Filter the table based on a custom input and redraw"><![CDATA[
var table = $('#example').DataTable();

$('#myFilter').on( 'keyup', function () {
	table
		.search( this.value )
		.draw();
} );
]]></example>

	<example title="Sort and then redraw the table maintaining current paging position"><![CDATA[
var table = $('#example').DataTable();

// Sort by column 1 and then re-draw
table
	.sort( [[ 1, 'asc' ]] )
	.draw( false );
]]></example>

	<related type="option">drawCallback</related>
</dt-api>