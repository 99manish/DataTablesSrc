<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="callback">
	<name>stateSaveCallback</name>
	<summary>Callback that defines how the table state is stored and where.</summary>
	<since>1.10</since>

	<type type="function">
		<signature>stateSaveCallback( settings, data )</signature>
		<parameter type="object" name="settings">
			DataTables settings object
		</parameter>
		<parameter type="object" name="data">
			Data to save. The data comes from `dt-init stateSaveParams`
		</parameter>
		<scope>HTML table element</scope>
	</type>

	<description>
		DataTables can save the state of the table (paging, filtering etc) when the `dt-init stateSave` option is enabled, and by default it will use HTML5's `localStorage` to save the state into. This callback method allows you to change where the state is saved (for example you might wish to use `localSession` or cookies).

		Please note that this method is required only to store the data given to it. The `dt-init stateSaveParams` method is used to manipulate the data that is to actually be saved.

		This callback works hand-in-hand with `dt-init stateLoadCallback`. This method saves the state while `dt-init stateSaveCallback` will load it from where this callback has saved it.
	</description>

	<example title="Save state on a server with Ajax"><![CDATA[
$('#example').dataTable( {
  "stateSave": true,
  "stateSaveCallback": function (settings, data) {
    // Send an Ajax request to the server with the state object
    $.ajax( {
      "url": "/state_save",
      "data": data,
      "dataType": "json",
      "method": "POST"
      "success": function () {}
    } );
  }
} );
]]></example>

	<related type="option">stateSave</related>
	<related type="option">stateSaveCallback</related>
	<related type="option">stateLoadParams</related>
	<related type="option">stateLoaded</related>
	<related type="option">stateSaveParams</related>
</dt-option>