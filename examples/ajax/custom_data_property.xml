<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="6">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>AJAX custom data source example</title>
<js><![CDATA[
$(document).ready(function() {
	$('#example').dataTable( {
		"ajax": {
			"url": "sources/custom_prop.txt",
			"dataSrc": "demo"
		}
	} );
} );
]]></js>

<info><![CDATA[

When loading data from an Ajax source, by default, DataTables will look for the data to use in the `data` parameter of a returned object (e.g. `{ "data": [...] }`). Using the `dataSrc` option of the `dt-init ajax` initiation option you can easily tell DataTables to look for something else.

The `ajax.dataSrc` has a number of ways in which it can be used:

* As a string (e.g. `dataSrc: 'myData'`) - obtain data from a different property in the source object.
* As an empty string (e.g. `dataSrc: ''`) - the data source is not an object but an array.
* As a function (e.g. `dataSrc: function(json) {}`) - a function can be used to transform the data from one source format to another (for example you could convert from XML to a Javascript object). The value returned from the function is used as the data for the table.

The example below shows `ajax.dataSrc` being used as a string to get the data from a different source property.


]]></info>

</dt-example>
