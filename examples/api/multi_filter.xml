<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Individual column filtering (text inputs)</title>
<js><![CDATA[

$(document).ready(function() {
	// Setup - add a text input to each footer cell
	$('#example tfoot th').each( function () {
		var title = $('#example thead th').eq( $(this).index() ).text();
		$(this).html( '<input type="text" placeholder="Search '+title+'" />' );
	} );

	// DataTable
	var table = $('#example').DataTable();
	
	// Apply the filter
	$("#example tfoot input").on( 'keyup change', function () {
		table
			.column( $(this).parent().index()+':visible' )
			.search( this.value )
			.draw();
	} );
} );

]]></js>

<info><![CDATA[

The filtering functionality that is provided by DataTables is very useful for quickly search through the information in the table - however the search is global, and you may wish to present controls to filter on specific columns only.

DataTables has the ability to apply filtering to a specific column through the `dt-api column().search()` method (note that the name of the method is `search` not `filter` since `dt-api filter()` is used to apply a filter to a data set).

The column filters are cumulative, so you can apply multiple individual column filters, in addition to the global filter, allowing complex filtering options to be presented to the user.

This examples shows text elements being used with the `dt-api column().search()` method to add input controls in the footer of the table for each column. Note that the `*index*:visible` option is used for the column selector to ensure that the `dt-api column()` method takes into account any hidden columns when selecting the column to act upon.

]]></info>

</dt-example>
