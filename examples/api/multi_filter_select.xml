<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Individual column filtering (select inputs)</title>
<js><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	$("#example tfoot th").each( function ( i ) {
		var select = $('<select><option value=""></option></select>')
			.appendTo( this )
			.on( 'change', function () {
				table.column( i )
					.search( $(this).val() )
					.draw();
			} );

		table.column( i ).data().unique().sort().each( function ( d, j ) {
			select.append( '<option value="'+d+'">'+d+'</option>' )
		} );
	} );
} );

]]></js>

<info><![CDATA[

This example is almost identical to text based individual column example and provides the same functionality, but in this case using `select` input controls.

After the table is initialised, the API is used to build the `tag select` inputs through the use of the `dt-api column().data()` method to get the data for each column in turn. The helper methods `dt-api unique()` and `dt-api sort()` are also used to reduce the data for set input to unique and ordered elements. Finally the `change` event from the `tag select` input is used to trigger a column search using the `dt-api column().search()` method.

]]></info>

</dt-example>
