<?xml version="1.0" encoding="UTF-8" ?>
<dt-page order="4" comments="yes" main-nav="yes">
	<title>API</title>

	<summary>
	<![CDATA[

The DataTables API presents a wealth of options for accessing the data contained in a table, and otherwise manipulating the table programmatically. These functions range from selecting rows, columns and cells to get and set their data, to changing column visibility and applying search terms to the table dynamically.

	]]>
	</summary>

	<content>
	<![CDATA[

DataTables has an extensive API which can be used to access the data contained in the table and otherwise manipulate the table after initialisation has completed. The DataTables API is designed to reflect the structure of the data in the table, and the ways that you will typically want to interact with the table. As such the API is broken into six key areas for working with the table and its data:

* Tables - working with tables and its main components - `dt-api tables()` and `dt-api table()`
* Columns - working with columns - `dt-api columns()` and `dt-api columns()`
* Rows - working with rows - `dt-api rows()` and `dt-api row()`
* Cells - working with cells - `dt-api cells()` and `dt-api cell()`
* Core - general table methods such as `dt-api draw()`
* Utilities - data manipulation methods such as `dt-api unique()` for working with the data in the result set.

For a full list of the methods that are available to DataTables, please refer to the [API reference](/reference/api) available on this site.


## Terminology

In order to keep the documentation of the API succinct, a number of terms are used to describe, or refer to, aspects of the API. These are defined here:

* Instance - an instance of the API is a single object instance which refers to a specific set of DataTable tables (i.e. is the the result of `new Api()`).
* Result set - the data held by the API instance. The DataTables API instances are "array like" in that they hold data in the same way as a plain Javascript array (and thus can be accessed using array `[]` notation) and has many of the same methods available (`dt-api sort()` and `dt-api push()` for example). This is much in the same way as jQuery is array like in nature.
* Context - the context of an API instance describes the DataTables that the API instance has a link to. Each API instance can refer to one or more DataTables tables, with the ability to act upon those tables (see below for further information).


## Accessing the API

A new DataTables API instance can be obtained for one or more tables in one of three different ways:

* `$( selector ).DataTable();`
* `$( selector ).dataTable().api();`
* `new $.fn.dataTable.Api( selector );`

The result from each is an instance of the DataTables API object which has the tables found by the selector in its context.

It is important to note the difference between `$( selector ).DataTable()` and `$( selector ).dataTable()`. The former returns a DataTables API instance, while the latter returns a `dt-type jQuery` object. An `api()` method is added to the jQuery object so you can easily access the API, but the jQuery object can be useful for manipulating the table node, as you would with any other jQuery instance (such as using `addClass()` etc).


## Chaining

Like jQuery, the DataTables API makes heavy use of chaining, with many of the DataTables methods returning the API instance itself, so you can immediately call another API method. For example:

```js
var table = $('#example').DataTable();

table.search( 'Fiona' ).draw();
```

This makes use of two different API methods, `dt-api search()` and `dt-api draw()`, on a single line. It could equally be written as:


```js
var table = $('#example').DataTable();

table.search( 'Fiona' );
table.draw();
```

The functionality is identical in this case, but chaining can allow for more succinct and expressive code.

Where the DataTables API departs from jQuery's chaining method is that DataTables makes use of nested methods and properties. For example the `dt-api ajax.json()` method gives you access to the latest JSON data from an Ajax call DataTables has made - in this case the `json()` method is a child of the `ajax` property. Likewise, the `dt-api columns()` (and other data manipulation methods) provide their own chaining child methods. For example `dt-api columns().visible()`. This allows the API to be very expressive in terms of how you access data, with methods relating to what has been called before.

All top level methods of the API will always be available, at all levels of nesting of the API. For example `dt-api draw()` is a top level method, but it can be called after a row is removed from the table: `table.row( selector ).remove().draw();`.

Please note that not all methods will return an API instance for chaining. In some cases, returning the API instance for chaining wouldn't be appropriate, such as `dt-api cell().node()` to get a `dt-tag td` / `dt-tag th` element. The [API reference documentation](/reference/api) contains full details for each method on what it will return.


## Multiple tables

DataTables API instances can refer to multiple tables in their context. The API will treat each table in an instance's context as the same. For example:

```js
var tables = $('.dataTable').DataTable();

table.page( 'next' ).draw( false );
```

This code will select all tables in the document with the class `dataTable` and jump them all to their next page of data display (using `dt-api page()`).

Equally, an API instance can refer to a single table if required, simply by altering the jQuery selector used to create the API instance: `$('#myTable').DataTable();` will create an API instance with a single table in its context for example.


## Plural / Singular

When working with the API you will notice that the methods make extensive use of plural and singular terminology. Although this is relatively unusual in an API, it is done to reflect the way that you access the data in the table - for example `dt-api rows().data()` will return an API instance with the data for the selected rows in its result set (i.e. like an array), while `dt-api row().data()` will return the data for just that row. This makes working with the API much more intuitive as you will always get the result you expect.

To be clear, in English (for our international users):

* Singular === 1
* Plural > 1

So if you want to use one of the selector methods to select multiple items, use the plural form of the method. If you want to select a single specific item, use the singular form.


## Example - column filter

[API reference documentation](/reference/api) contains an example for each API method, along with a detailed description of what it does, what it returns and what parameters it will accept; but let's form the concepts described above into a detailed, line-by-line example of how the DataTables API can be used. In this case we create a `dt-tag select` element in the footer cell of each column in the table, which contains the data from that column and will be used for searching the table.

```js
var table = $('#example').DataTable();

table.columns().flatten().each( function ( colIdx ) {
	// Create the select list and search operation
	var select = $('<select />')
		.appendTo(
			table.column(colIdx).footer()
		)
		.on( 'change', function () {
			table
				.column( colIdx )
				.search( $(this).val() )
				.draw();
		} );

	// Get the search data for the first column and add to the select list
	table
		.column( colIdx )
		.cache( 'search' )
		.sort()
		.unique()
		.each( function ( d ) {
			select.append( $('<option value="'+d+'">'+d+'</option>') );
		} );
```

* Line 1 - Get an instance of the DataTables API with a single table in its context
* Line 3 - Select all columns in the table with the `dt-api columns()` method. `dt-api flatten()` is used to reduce the 2D array return of `dt-api columns()` to a 1D array of column indexes, and the utility method `dt-api each()` is used to perform an action on each of the selected columns.
* Line 5 - The `dt-tag select` element for the column's filter is created
* Line 7 - Using the `dt-api column().footer()` method to get the footer cell element into which to insert the select input.
* Line 9 - Use the [jQuery on()](//api.jquery.com/on/) method to perform an action when the `dt-tag select` element's value changes - in this case searching the table.
* Lines 10 - 13 - Use `dt-api column().search()` to queue up the search, and `dt-api draw()` chaining to the result to update the table's display.
* Lines 17 - 19 - Get the data from the column that DataTables uses to search the table using the `dt-api column().cache()` method.
* Lines 20 - 21 - The utility methods `dt-api sort()` and `dt-api unique()` are used to reduce the data to a nicely ordered list that you would want to present to your end users.
* Lines 22 - 24 - A search term option is added to our `dt-tag select` list, ready for use.

As you'll be able to see, the DataTables API is extremely flexible, and provides a wide range of options for accessing and manipulating the table. Please see the [API reference documentation](/reference/api) for a full list of the methods that are available. Furthermore, plug-ins such as [Editor](//editor.datatables.net) can extend the API with custom methods such as `row().edit()` and `cell().edit()` among other options.

	]]>
	</content>
</dt-page>