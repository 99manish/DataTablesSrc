<?xml version="1.0" encoding="UTF-8" ?>
<dt-page order="2" comments="yes" main-nav="yes">
	<title>Data sources</title>

	<summary>
	<![CDATA[

Data is complex, and all data is different. Accordingly, DataTables has a wealth of options which can be used to configure how it will obtain the data to display in the table, and how it processes that data. This section of the manual describes the options to configure DataTables to read data from your data source.

	]]>
	</summary>

	<content>
	<![CDATA[

Data is complex, and all data is different. Accordingly, DataTables has a wealth of options which can be used to configure how it will obtain the data to display in the table, and how it processes that data.

There are three core concepts in how DataTables handles data, which are discussed in detail on this page:

* Processing mode
* Data types
* Data sources


## Processing modes

DataTables has two different modes of processing data - i.e. how the ordering, searching etc of data is performed. These are:

* Client-side processing - all data processing is performed in the browser
* Server-side processing - all data processing is performed on the server

Each has its own advantages and disadvantages, but the key indicator for which mode you should select is based on the number of rows in your table. As a rule of thumb, if you are working with less than 10'000 rows, use client-side processing, for greater than 100'000 rows, use server-side processing. In-between is a grey area where you will need to make a decision based upon the data you wish to display!

### Client-side processing

Client-side processing is the default operating mode of DataTables as it is easy to use and requires no additional code to be written. In client-side processing mode, the order of the data in the table, searching, paging and all other data processing operations DataTables performs are done in pure Javascript. This means that they are ready to be used as they are built into DataTables.

### Server-side processing

Where server-side processing comes into play is when you have very large quantities of data that you wish to display in the table (millions of rows for example). At these levels, sending the data to the client, and then having Javascript process the data can involve noticeable overhead, resulting in poor performance of the end application. In server-side processing mode, all ordering, searching etc of the data is handed off to the server which can make use of the database engines available there, which are highly tuned for exactly these kinds of operations. Each 'draw' (page) of data involves making an Ajax request to the server. Although each Ajax request might take a fraction of a second to complete, this approach might be preferable to a large wait up-front as all data loads.

Server-side processing is enabled by the `dt-init serverSide` option, and full documentation for how server-side processing operates is available in [its section of this manual](/manual/server-side).


## Data types

Data, in Javascript can take three basic forms which are repeatable for the data to display in a DataTable:

* Arrays - `[]`
* Objects - `{}`
* Instances - `new MyClass()`

DataTables can consume data from any of these options using the `dt-init columns.data` and `dt-init columns.render` options. The default mode of operation is an array, since it requires zero configuration, but objects and instances can be useful as they are more intuitive when working with complex data.

### Arrays

Arrays are easy to work with in a DataTable as the mapping between array elements to the column the data appears in is performed simply by the column index reading the array element value in that position. As such, when using arrays as your data source, the number of elements in each array must be equal to the number of columns in the table. For example, for a 6 column table you might have:

```js
var data = [
	[
		"Tiger Nixon",
		"System Architect",
		"Edinburgh",
		"5421",
		"2011/04/25",
		"$3,120"
	],
	[
		"Garrett Winters",
		"Director",
		"Edinburgh",
		"8422",
		"2011/07/25",
		"$5,300"
	]
]
```

And the table initialisation:

```js
$('#example').dataTable( {
	data: data
} );
```

Which would result in a table such as:

| Name | Position | Office | Age | Start date | Salary |
| ---- | -------- | ------ | --- | ---------- | ------ |
| Tiger Nixon | System Architect | Edinburgh | 5421 | 2011/04/25 | $3,120 |
| Garrett Winters | Director | Edinburgh | 8422 | 2011/07/25 | $5,300 |


### Objects

Objects are great for intuitive use in a slightly different way from arrays. If you are actively working with the data through [the API](/manual/api), objects can make obtaining a particular piece of data very easy as you need only use a propery name, rather than remembering which array index that data is in (for example `data.name`, rather than `data[0]`).

Objects can also contain more information than is required for the DataTable display, which can be very useful for operating on the data (for example including a database primary key which is not visible to the end user).

The down side of using objects is that you need to explicitly tell DataTables which property it should use from the object for each column. This is done using the `dt-init columns.data` and / or `dt-init columns.render` options.

Object based data may look like:

```js
[
	{
		"name":       "Tiger Nixon",
		"position":   "System Architect",
		"salary":     "$3,120",
		"start_date": "2011/04/25",
		"office":     "Edinburgh",
		"extn":       "5421"
	},
	{
		"name":       "Garrett Winters",
		"position":   "Director",
		"salary":     "$5,300",
		"start_date": "2011/07/25",
		"office":     "Edinburgh",
		"extn":       "8422"
	}
]
```

And the table initialisation (note that only 4 columns are defined and the order of the data is easily defined by changing where each property is used, rather than needing to reorder the source objects):

```js
$('#example').dataTable( {
	data: data,
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'salary' },
		{ data: 'office' }
	]
} );
```

Which would result in a table such as:

| Name | Position | Salary | Office |
| ---- | -------- | ------ | ------ |
| Tiger Nixon | System Architect | $3,120 | Edinburgh |
| Garrett Winters | Director | $5,300 | Edinburgh |

### Instances

It can be quite useful to have DataTables display information from Javascript object instances, as these instances define abstract methods which can be used to update data. For example you might have an `Employee` class, or a `Car` class etc depending on the data you are modelling. Instances can be used in DataTables in much the same way as objects - simply pass in your object and give the method or property name to `dt-init columns.data` for the data for each column.

```js
function Employee ( name, position, salary, office ) {
	this.name = name;
	this.position = position;
	this.salary = salary;
	this._office = office;

	this.office = function () {
		return this._office;
	}
};

$('#example').dataTable( {
	data: [
		new Employee( "Tiger Nixon", "System Architect", "$3,120", "Edinburgh" ),
		new Employee( "Garrett Winters", "Director", "$5,300", "Edinburgh" ),
	],
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'salary' },
		{ data: 'office' }
	]
} );
```

Note that `office` is a method of the class above, while `name`, `position` and `salary` are properties. DataTables will automatically realise that there is a function, execute it and use the returned value for the cell (note you could also use the syntax `office()` to be explicit that a function is used - see `dt-init columns.data` for further information).

Like the objects data source option above, this would result in a table such as:

| Name | Position | Salary | Office |
| ---- | -------- | ------ | ------ |
| Tiger Nixon | System Architect | $3,120 | Edinburgh |
| Garrett Winters | Director | $5,300 | Edinburgh |


## Data sources

With the concepts of the processing mode and data types now defined, we can consider how DataTables actually gets the data it is to operate with. There are three basic sources for the data that DataTables will display in the table:

* DOM (i.e. the plain HTML of the document)
* Javascript
* Ajax sourced data

### DOM

When DataTables starts up, it will automatically check the table it is operating on for data that already exists inside it and use it for the table (note that it will throw this data away if you pass in data using `dt-init data` or `dt-init ajax` to get new data!). This is the simplest method of using DataTables - working with a regular HTML table.

Note that when using a DOM sourced table, DataTables will use arrays as the data source (see above).

#### HTML5

DataTables can also make use of HTML5 `data-*` attributes, which can provide DataTables with additional information for ordering and search data. For example you might have a column with a date formatted such as "21st November 2013". Browsers will struggle to sort that, but you could provide a `data-order` attribute as part of the HTML for the cell which contains a timestamp that can be easily sorted upon. Extending that, search data can be provided using `data-search`. For example:

```html
<td data-search="21st November 2013 21/11/2013" data-order="1384992000">
	21st November 2013
</td>
```

DataTables will automatically detect:

* Ordering data: `data-order` and `data-sort` attributes
* Search data: `data-search` and `data-filter` attributes.

See the manual entry for [orthogonal data](/manual/orthogonal-data) for further information.

### Javascript

You can instruct DataTables to use data given to it using the `dt-init data` initialisation option. This data can be in the form of arrays, objects or instances (see above) and can be sourced form anywhere you want! As long as Javascript can access the data, you can send it to DataTables (be it from a custom Ajax call, a WebSocket or just a good old fashioned array of data).

This method can be particularly useful when working extensively with the [DataTables API](/manual/api), in particular the `dt-api row.add()` and `dt-api row().remove()` methods can be used to add and remove data from the table dynamically, again from whatever source you wish to choose.

### Ajax

Ajax sourced data is much like Javascript sourced data, but DataTables will make an Ajax call to get the data for you. It can often be very useful to source table data from a specific script, separating the logic for retrieving the data from the display. Ajax sourced data in DataTables is controlled by the `dt-init ajax` option. In its simplest form, you set the property value as a string, pointing at the URL you want to load data from.

Like Javascript sourced data, Ajax sourced data can be in the form of objects or arrays (see above), but not, in this case, instances (since they cannot be represented in JSON).

[Server-side processing](/manual/server-side) as discussed above, is a special form of Ajax sourced data, whereby the data to be shown for each view in the DataTable is retrieved by an Ajax request only when that view is required for display to the user. This allows the power of the database engine on servers to be utilised for large data sets. For more information about server-side processing, and how it can be implemented, please refer to [its documentation in this manual](/manual/server-side).

	]]>
	</content>
</dt-page>