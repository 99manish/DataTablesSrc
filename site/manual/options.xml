<?xml version="1.0" encoding="UTF-8" ?>
<dt-page order="4" comments="yes" main-nav="yes">
	<title>Options</title>

	<summary>
	<![CDATA[

	]]>
	</summary>

	<content>
	<![CDATA[

DataTables as a huge range of options available, which you can use to customise the way that it will present its interface, and the features available, to the end user. This is done through its configuration options, which are set at initialisation time in the table.


## Setting options

Configuration of DataTables is done by passing the options you want defined into the DataTables constructor as an object. For example:

```js
$('#example').DataTable( {
	paging: false
} );
```

This uses the `dt-init paging` option to disable paging on the table.

Lets say you want to enable scrolling in the table - you would use the `dt-init scrollY` option:

```js
$('#example').DataTable( {
	scrollY: 400
} );
```

Extending that, you can combine multiple options into a single object. In this case we enable scrolling and disable paging:

```js
$('#example').DataTable( {
	paging: false,
	scrollY: 400
} );
```

The object being passed in is just a standard Javascript object and can be treated as such. Add as many options as you wish!

For the full range of configuration options available for DataTables, please refer to the [options reference](/reference/options) section of this web-site.


## Common options

Some of the options you might find particularly useful are:

* `dt-init ajax` - Ajax data source configuration
* `dt-init data` - Javascript sourced data
* `dt-init serverSide` - Enable server-side processing
* `dt-init columns.data` - Data source options for a column
* `dt-init scrollX` - Horizontal scrolling
* `dt-init scrollY` - Vertical scrolling

There are many many more (90+) options available for DataTables to configure it exactly how you need. Please see the [options reference](/reference/options) for the full list of options available.


## Setting defaults

When working with DataTables over multiple pages it is often useful to set the initialisation defaults to common values (for example you might want to set the `dt-init dom` option to a common value so all tables get the same layout). This can be done using the `$.fn.dataTable.defaults` object. This object takes all of the same parameters as the DataTables initialisation object, but in this case you are setting the default for all future initialisations of DataTables.

In this example we disable the searching and ordering features of DataTables by default, but when the table is initialised, it is initialised with ordering enabled (overriding the default).

```js
// Disable search and ordering by default
$.extend( $.fn.dataTable.defaults, {
	searching: false,
	ordering:  false
} );

// For this specific table we are going to enable ordering
// (searching is still disabled)
$('#example').DataTable( {
	ordering: true
} );
```

	]]>
	</content>
</dt-page>