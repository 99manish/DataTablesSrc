<?xml version="1.0" encoding="UTF-8" ?>
<dt-page comments="yes" order="1">
	<title>1. Warning: Invalid JSON response</title>

	<summary>
	<![CDATA[

A warning from DataTables stating "Invalid JSON response" is one of the most common errors that can occur with DataTables. This tech note explains exactly that it means and how to diagnose what is causing the problem.

	]]>
	</summary>

	<js>
	<![CDATA[

// Browser UA detection to display the instructions relevant to the browser being used to view
// Based https://github.com/gabceb/jquery-browser-plugin/blob/master/dist/jquery.browser.js
// MIT license

(function( jQuery, window, undefined ) {
"use strict";

var matched, browser;

jQuery.uaMatch = function( ua ) {
  ua = ua.toLowerCase();

        var match = /(opr)[\/]([\w.]+)/.exec( ua ) ||
                /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                /(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
                /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                /(msie) ([\w.]+)/.exec( ua ) ||
                ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
                ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                [];

        return {
                browser: match[ 3 ] || match[ 1 ] || "",
                version: match[ 2 ] || "0"
        };
};

matched = jQuery.uaMatch( window.navigator.userAgent );
browser = {};

if ( matched.browser ) {
        browser[ matched.browser ] = true;
        browser.version = matched.version;
    browser.versionNumber = parseFloat(matched.version, 10);
}

// Chrome, Opera 15+ and Safari are webkit based browsers
if ( browser.chrome || browser.opr || browser.safari ) {
        browser.webkit = true;
}

// IE11 has a new token so we will assign it msie to avoid breaking changes
if ( browser.rv )
{
        var ie = 'msie';

        matched.browser = ie;
        browser[ie] = true;
}

// Opera 15+ are identified as opr
if ( browser.opr )
{
        var opera = 'opera';

        matched.browser = opera;
        browser[opera] = true;
}

// Assign the name and platform variable
browser.name = matched.browser;


jQuery.browser = browser;

})( jQuery, window );



$(document).ready( function () {
	$("img[title='lightbox']")
		.css( 'width', '100%' )
		.removeAttr( 'title' )
		.addClass( 'lightbox' )
		.click( function () {
			$.slimbox( this.src, this.getAttribute('alt') );
		} );

	$('h4:contains("Safari")')
		.nextUntil( 'h4' )
		.addBack()
		.css( 'display', $.browser.safari ? 'block' : 'none' );

	$('h4:contains("Chrome")')
		.nextUntil( 'h4' )
		.addBack()
		.css( 'display', $.browser.chrome ? 'block' : 'none' );

	$('h4:contains("IE")')
		.nextUntil( 'h4' )
		.addBack()
		.css( 'display', $.browser.msie ? 'block' : 'none' );

	$('h4:contains("Firefox")')
		.nextUntil( 'h4' )
		.addBack()
		.css( 'display', $.browser.mozilla ? 'block' : 'none' );

	$('h4:contains("Opera")')
		.nextUntil( 'h3' )
		.addBack()
		.css( 'display', $.browser.opera ? 'block' : 'none' );

	_site.cacheHeaderPositions();
} );

	]]>
	</js>

	<content>
	<![CDATA[

A warning from DataTables stating "Invalid JSON response" is one of the most common errors that can occur with DataTables. Fortunatly it is fairly easy to diagnose what is going wrong, with the developer tools built into modern web-browsers. This guide shows exactly what the error means, how to diagnose the issue and how to resolve it.


## Meaning

When loading data by Ajax (`dt-init ajax`), DataTables by default, expects the data loaded to be valid JSON. [JSON](http://www.json.org/) is a data-interchange format that has provide to be extremely populate on the web, due to its compatibility with Javascript, its ease of use and the fact that it is easily human readable. However, like all data-interchange formats, it has strict rules about what is valid JSON. Anything that does not meet this criterion is invalid JSON, and will throw an error in DataTables where it expects JSON.

When DataTables shows the message:

> DataTables warning: table id=`{id}` - Invalid JSON response.

it means exactly what it says. DataTables made an Ajax response to the server for JSON data, but the data that it received back was not valid JSON.



## Diagnosis

If the server didn't reply to the Ajax request with valid JSON data, we need to know what it did reply with, so we can take corrective action. Typically, the response will consist of an error message from the program on the server which is being used to create the JSON, which will be the starting point for resolving the issue full.


### Server data

Modern browsers all come with built in developer tools, which can be used to find out what data the server is responding to the DataTables Ajax request with. Instructions on how to do this with your browser are shown below.

#### Safari

Safari steps


#### Chrome

|||
||1-4
![Chrome debugging - step 1](/media/images/tn/1/chrome-1.png "lightbox")
1. Open debugger
||
||1-4
![Chrome debugging - step 2](/media/images/tn/1/chrome-2.png "lightbox")
2. Console displayed
||
||1-4
![Chrome debugging - step 3](/media/images/tn/1/chrome-3.png "lightbox")
3. Show Network tab
||
||1-4
![Chrome debugging - step 4](/media/images/tn/1/chrome-4.png "lightbox")
4. Ajax response
||
|||

1. To access the developer tools in Chrome:
  * Mac: Access the _View > Developer > Developer Tools_ menu option.
  * Windows: Click the Chrome menu (to the right of the address bar) and select _Tools > Developer Tools_.
2. The _Developer tools_ are shown at the bottom of the current browser window. Chrome will show the Javascript console by default.
  * Click on the _Network_ tab to view network requests
  * Refresh the page to allow Chrome to capture all requests
3. The network panel will show all of the requests made by Chrome to load the page.
  * Click the _XHR_ option at the bottom of the window to reduce the requests to just the Ajax (XHR) requests.
  * Double click the Ajax request made by DataTables
4. Details about the Ajax request are shown.
  * Click the _Reponse_ tab in the Ajax view to see the exact data that was returned from the server. This is what we are interested in!

Please note that these instructions were written with Chrome 31 Mac as the version used. Newer versions, or those on different platforms might have slightly different steps.


#### Firefox


|||
||1-4
![Firefox debugging - step 1](/media/images/tn/1/firefox-1.png "lightbox")
1. Open debugger
||
||1-4
![Firefox debugging - step 2](/media/images/tn/1/firefox-2.png "lightbox")
2. Network requests
||
||1-4
![Firefox debugging - step 3](/media/images/tn/1/firefox-3.png "lightbox")
3. Ajax requests
||
||1-4
![Firefox debugging - step 4](/media/images/tn/1/firefox-4.png "lightbox")
4. Ajax response
||
|||

1. To access the developer tools in Firefox:
  * Mac: Access the _Tools > Web Developer > Network_ menu option.
  * Windows: Click the Firefox menu (top left of the window) and select _Web Developer Network_ option.
2. The _Developer tools_ are shown at the bottom of the current browser window.
  * Refresh the page to allow Firefox to capture all requests
3. The network panel will show all of the requests made by Firefox to load the page.
  * Click the _XHR_ option at the bottom of the window to reduce the requests to just the Ajax (XHR) requests.
  * Double click the Ajax request made by DataTables
4. Details about the Ajax request are shown.
  * Click the _Reponse_ tab in the Ajax view to see the exact data that was returned from the server. This is what we are interested in!

Please note that these instructions were written with Firefox 26 Windows as the version used. Newer versions, or those on different platforms might have slightly different steps.


#### IE

|||
||1-5
![IE debugging - step 1](/media/images/tn/1/ie-1.png "lightbox")
1. Open debugger
||
||1-5
![IE debugging - step 2](/media/images/tn/1/ie-2.png "lightbox")
2. Element inspector
||
||1-5
![IE debugging - step 3](/media/images/tn/1/ie-3.png "lightbox")
3. Show Network tab
||
||1-5
![IE debugging - step 4](/media/images/tn/1/ie-4.png "lightbox")
4. Ajax response
||
||1-5
![IE debugging - step 4](/media/images/tn/1/ie-5.png "lightbox")
4. Ajax response
||
|||

1. To access the developer tools in IE:
  * Press F12 or,
  * Click the tools menu (top right, a cog icon) and select the _F12 developer tools_ option.
2. The _Developer tools_ are shown at the bottom of the current browser window. IE will show the document tree by default.
  * Click on the _Network_ tab to view network requests
3. IE requires that network traffic be specifically tracked, which we want here.
  * Click the _Start capturing_ button to capture network requests
  * Refresh the page to allow IE to capture all requests
4. The network panel will show all of the requests made by IE to load the page.
  * Double click the Ajax request made by DataTables - it will likely be at or near the bottom of the request list
5. Details about the Ajax request are shown.
  * Click the _Reponse body_ tab in the Ajax view to see the exact data that was returned from the server. This is what we are interested in!

Please note that these instructions were written with IE 10 as the version used. Newer versions might have slightly different steps.


#### Opera

|||
||1-4
![Opera debugging - step 1](/media/images/tn/1/opera-1.png "lightbox")
1. Open debugger
||
||1-4
![Opera debugging - step 2](/media/images/tn/1/opera-2.png "lightbox")
2. Element inspector
||
||1-4
![Opera debugging - step 3](/media/images/tn/1/opera-3.png "lightbox")
3. Show Network tab
||
||1-4
![Opera debugging - step 4](/media/images/tn/1/opera-4.png "lightbox")
4. Ajax response
||
|||

1. To access the developer tools in Opera:
  * Mac: Right click or _ctrl_ click the document and select the _Inspect element_ option.
  * Windows: Right click the document and select the _Inspect element_ option.
2. The _Developer tools_ are shown at the bottom of the current browser window. Opera will show information about the element that was clicked on.
  * Click on the _Network_ tab to view network requests
  * Refresh the page to allow Opera to capture all requests
3. The network panel will show all of the requests made by Opera to load the page.
  * Click the _XHR_ option at the bottom of the window to reduce the requests to just the Ajax (XHR) requests.
  * Double click the Ajax request made by DataTables
4. Details about the Ajax request are shown.
  * Click the _Reponse_ tab in the Ajax view to see the exact data that was returned from the server. This is what we are interested in!

Please note that these instructions were written with Opera 18 Mac as the version used. Newer versions, or those on different platforms might have slightly different steps.



### JSON validation

Once you have the Ajax data response from the server, you can validate the JSON using a tool such as [JSON Lint](http://jsonlint.com/) or [JSON Parser](http://json.parser.online.fr/). Often the error in the JSON response from the server will be very obvious, but a JSON Linter can provide to be very useful for resolve the less obvious issues, such as trailing commas.



## Resolution

Once you have followed the instructions above to find out what the data from the server actually is, since it is not JSON, you will be able to modify the data, or the program that creates the data, to return valid JSON only.


	]]>
	</content>
</dt-page>