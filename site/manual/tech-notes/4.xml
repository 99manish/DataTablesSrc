<?xml version="1.0" encoding="UTF-8" ?>
<dt-page comments="yes" order="4">
	<title>4. Warning: Requested unknown parameter</title>

	<summary>
	<![CDATA[

When DataTables tries to obtain data from a data source and is unable to do so, it will trigger this warning, telling you that data is not available where it was expected to be.

	]]>
	</summary>

	<content>
	<![CDATA[

This is possibly the most cryptic warning message that DataTables will show. It is a short error message as it needs to cope with all of the [data source](/manual/data-sources) options that DataTables has, but flexible enough to convey information for each of these cases, hence why it can appear a little cryptic on first inspection. However, when we break it down into its component parts, it is actually relatively straight forward, as described below.


## Meaning

Each cell in DataTables requests data, and when DataTables tries to obtain data for a cell and is unable to do so, it will trigger a warning, telling you that data is not available where it was expected to be. The warning message is:

> DataTables warning: table id=`{id}` - Requested unknown parameter '`{parameter}`' for row `{row-index}`

where:

* `{id}` is replaced with the DOM id of the table that has triggered the error
* `{parameter}` is the name of the data parameter DataTables is requesting
* `{row-index}` is the DataTables internal row index (`dt-api row().index()` for the rwo that has triggered the error.

So to break it down, DataTables has requested data for a given row, of the `{parameter}` provided and there is no data there, or it is `null` or `undefined` (DataTables doesn't know, by default how to display these parameters - see below if your data does contain these values).


## Diagnosis

The key part to understanding this error message is the `{parameter}` aspect of it. It will be in one of three forms:

* Integer
* String
* Function

### Parameter is an integer

When `{parameter}` is an integer, DataTables is looking for data from an array. This is usually the case when using DOM sourced data (i.e. the data for the table is read automatically from the document). In this circumstance the requested data doesn't exist in source array - likely because the array isn't long enough. This can occur if:

* There is a `colspan` or `rowspan` in the `dt-tag tbody` of the table, which is not supported by DataTables.
* Using `dt-init columns` or `dt-init columnDefs` you have specified more columns than there are in the HTML
* The number of cells in the table does not satisfy the equation `#cells = #columns * #rows`.


### Parameter is a string

If `{parameter}` is shown as a string, this will typically indicate that you have used `dt-init column.data` or `dt-init column.render` to pull data out of an object, be it Ajax loaded or from the client-side. For example the error message in read: _Requested unknown parameter 'Name' for row 0_. This will indicate that a column which uses `dt-init column.data` has been unable to obtain valid data to display - for example:

```js
{ data: 'Name' }
```

would produce this error if the data source object for the row had no `Name` parameter or the data was `null` or `undefined`.

As a result, this error usually occurs if:

* The data property specified doesn't exist (a typo or a gap in data)
* The value of the property specified is null


### Parameter is a function

If `{parameter}` simply says _{function}_ it means that `dt-init columns.data` or `dt-init columns.render` have been given as a function, but the function has returned `null` or `undefined`. For example, the following would trigger such an error:

```js
{ data: function ( row, type, set ) {
	if ( type === 'display' ) {
		return row.Name;
	}
} );
```

Note how the return statement is only used when `type === 'display'`. As a result, if `type` is not _display_ then `undefined` is the return value from the function and DataTables will throw a warning.


## Resolution

The key to resolving this error, is to ensure that DataTables has all of the data that is required. Specifically, check the following:

* `colspan` and `rowspan` have not been used in the `dt-tag tbody` of the table.
* The equation `#cells = #columns * #rows` is satisfied.
* If using `dt-init columns` ensure that you have specified exactly the number of columns that are present in the HTML for the table.
* If using dt-init columnDefs` ensure that you have not specified more columns than there are in the HTML


### `null` or `undefined` data

`null` and `undefined` values in a data source absolutely are valid and very often useful. DataTables warns about the use of them by default, as the majority of the time they are not intended for display - for example, rather than showing _null_ in the table, you might want to show _Not yet set_, or simply an empty string (empty cell). For this, DataTables has a `dt-init columns.defaultContent` option.

With `dt-init columns.defaultContent` set, any `null` or `undefined` value will be replaced with the value specified. No warning will be shown in this circumstances.


	]]>
	</content>
</dt-page>